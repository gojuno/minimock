// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package tests

//go:generate minimock -i github.com/gojuno/minimock/v3/tests.funcCaller -o func_caller_mock.go -n FuncCallerMock -p tests

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// FuncCallerMock implements funcCaller
type FuncCallerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCallFunc          func(f func()) (i1 int)
	funcCallFuncOrigin    string
	inspectFuncCallFunc   func(f func())
	afterCallFuncCounter  uint64
	beforeCallFuncCounter uint64
	CallFuncMock          mFuncCallerMockCallFunc
}

// NewFuncCallerMock returns a mock for funcCaller
func NewFuncCallerMock(t minimock.Tester) *FuncCallerMock {
	m := &FuncCallerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CallFuncMock = mFuncCallerMockCallFunc{mock: m}
	m.CallFuncMock.callArgs = []*FuncCallerMockCallFuncParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mFuncCallerMockCallFunc struct {
	optional           bool
	mock               *FuncCallerMock
	defaultExpectation *FuncCallerMockCallFuncExpectation
	expectations       []*FuncCallerMockCallFuncExpectation

	callArgs []*FuncCallerMockCallFuncParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FuncCallerMockCallFuncExpectation specifies expectation struct of the funcCaller.CallFunc
type FuncCallerMockCallFuncExpectation struct {
	mock               *FuncCallerMock
	params             *FuncCallerMockCallFuncParams
	paramPtrs          *FuncCallerMockCallFuncParamPtrs
	expectationOrigins FuncCallerMockCallFuncExpectationOrigins
	results            *FuncCallerMockCallFuncResults
	returnOrigin       string
	Counter            uint64
}

// FuncCallerMockCallFuncParams contains parameters of the funcCaller.CallFunc
type FuncCallerMockCallFuncParams struct {
	f func()
}

// FuncCallerMockCallFuncParamPtrs contains pointers to parameters of the funcCaller.CallFunc
type FuncCallerMockCallFuncParamPtrs struct {
	f *func()
}

// FuncCallerMockCallFuncResults contains results of the funcCaller.CallFunc
type FuncCallerMockCallFuncResults struct {
	i1 int
}

// FuncCallerMockCallFuncOrigins contains origins of expectations of the funcCaller.CallFunc
type FuncCallerMockCallFuncExpectationOrigins struct {
	origin  string
	originF string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCallFunc *mFuncCallerMockCallFunc) Optional() *mFuncCallerMockCallFunc {
	mmCallFunc.optional = true
	return mmCallFunc
}

// Expect sets up expected params for funcCaller.CallFunc
func (mmCallFunc *mFuncCallerMockCallFunc) Expect(f func()) *mFuncCallerMockCallFunc {
	if mmCallFunc.mock.funcCallFunc != nil {
		mmCallFunc.mock.t.Fatalf("FuncCallerMock.CallFunc mock is already set by Set")
	}

	if mmCallFunc.defaultExpectation == nil {
		mmCallFunc.defaultExpectation = &FuncCallerMockCallFuncExpectation{}
	}

	if mmCallFunc.defaultExpectation.paramPtrs != nil {
		mmCallFunc.mock.t.Fatalf("FuncCallerMock.CallFunc mock is already set by ExpectParams functions")
	}

	mmCallFunc.defaultExpectation.params = &FuncCallerMockCallFuncParams{f}
	mmCallFunc.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCallFunc.expectations {
		if minimock.Equal(e.params, mmCallFunc.defaultExpectation.params) {
			mmCallFunc.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCallFunc.defaultExpectation.params)
		}
	}

	return mmCallFunc
}

// ExpectFParam1 sets up expected param f for funcCaller.CallFunc
func (mmCallFunc *mFuncCallerMockCallFunc) ExpectFParam1(f func()) *mFuncCallerMockCallFunc {
	if mmCallFunc.mock.funcCallFunc != nil {
		mmCallFunc.mock.t.Fatalf("FuncCallerMock.CallFunc mock is already set by Set")
	}

	if mmCallFunc.defaultExpectation == nil {
		mmCallFunc.defaultExpectation = &FuncCallerMockCallFuncExpectation{}
	}

	if mmCallFunc.defaultExpectation.params != nil {
		mmCallFunc.mock.t.Fatalf("FuncCallerMock.CallFunc mock is already set by Expect")
	}

	if mmCallFunc.defaultExpectation.paramPtrs == nil {
		mmCallFunc.defaultExpectation.paramPtrs = &FuncCallerMockCallFuncParamPtrs{}
	}
	mmCallFunc.defaultExpectation.paramPtrs.f = &f
	mmCallFunc.defaultExpectation.expectationOrigins.originF = minimock.CallerInfo(1)

	return mmCallFunc
}

// Inspect accepts an inspector function that has same arguments as the funcCaller.CallFunc
func (mmCallFunc *mFuncCallerMockCallFunc) Inspect(f func(f func())) *mFuncCallerMockCallFunc {
	if mmCallFunc.mock.inspectFuncCallFunc != nil {
		mmCallFunc.mock.t.Fatalf("Inspect function is already set for FuncCallerMock.CallFunc")
	}

	mmCallFunc.mock.inspectFuncCallFunc = f

	return mmCallFunc
}

// Return sets up results that will be returned by funcCaller.CallFunc
func (mmCallFunc *mFuncCallerMockCallFunc) Return(i1 int) *FuncCallerMock {
	if mmCallFunc.mock.funcCallFunc != nil {
		mmCallFunc.mock.t.Fatalf("FuncCallerMock.CallFunc mock is already set by Set")
	}

	if mmCallFunc.defaultExpectation == nil {
		mmCallFunc.defaultExpectation = &FuncCallerMockCallFuncExpectation{mock: mmCallFunc.mock}
	}
	mmCallFunc.defaultExpectation.results = &FuncCallerMockCallFuncResults{i1}
	mmCallFunc.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCallFunc.mock
}

// Set uses given function f to mock the funcCaller.CallFunc method
func (mmCallFunc *mFuncCallerMockCallFunc) Set(f func(f func()) (i1 int)) *FuncCallerMock {
	if mmCallFunc.defaultExpectation != nil {
		mmCallFunc.mock.t.Fatalf("Default expectation is already set for the funcCaller.CallFunc method")
	}

	if len(mmCallFunc.expectations) > 0 {
		mmCallFunc.mock.t.Fatalf("Some expectations are already set for the funcCaller.CallFunc method")
	}

	mmCallFunc.mock.funcCallFunc = f
	mmCallFunc.mock.funcCallFuncOrigin = minimock.CallerInfo(1)
	return mmCallFunc.mock
}

// When sets expectation for the funcCaller.CallFunc which will trigger the result defined by the following
// Then helper
func (mmCallFunc *mFuncCallerMockCallFunc) When(f func()) *FuncCallerMockCallFuncExpectation {
	if mmCallFunc.mock.funcCallFunc != nil {
		mmCallFunc.mock.t.Fatalf("FuncCallerMock.CallFunc mock is already set by Set")
	}

	expectation := &FuncCallerMockCallFuncExpectation{
		mock:               mmCallFunc.mock,
		params:             &FuncCallerMockCallFuncParams{f},
		expectationOrigins: FuncCallerMockCallFuncExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCallFunc.expectations = append(mmCallFunc.expectations, expectation)
	return expectation
}

// Then sets up funcCaller.CallFunc return parameters for the expectation previously defined by the When method
func (e *FuncCallerMockCallFuncExpectation) Then(i1 int) *FuncCallerMock {
	e.results = &FuncCallerMockCallFuncResults{i1}
	return e.mock
}

// Times sets number of times funcCaller.CallFunc should be invoked
func (mmCallFunc *mFuncCallerMockCallFunc) Times(n uint64) *mFuncCallerMockCallFunc {
	if n == 0 {
		mmCallFunc.mock.t.Fatalf("Times of FuncCallerMock.CallFunc mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCallFunc.expectedInvocations, n)
	mmCallFunc.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCallFunc
}

func (mmCallFunc *mFuncCallerMockCallFunc) invocationsDone() bool {
	if len(mmCallFunc.expectations) == 0 && mmCallFunc.defaultExpectation == nil && mmCallFunc.mock.funcCallFunc == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCallFunc.mock.afterCallFuncCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCallFunc.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CallFunc implements funcCaller
func (mmCallFunc *FuncCallerMock) CallFunc(f func()) (i1 int) {
	mm_atomic.AddUint64(&mmCallFunc.beforeCallFuncCounter, 1)
	defer mm_atomic.AddUint64(&mmCallFunc.afterCallFuncCounter, 1)

	mmCallFunc.t.Helper()

	if mmCallFunc.inspectFuncCallFunc != nil {
		mmCallFunc.inspectFuncCallFunc(f)
	}

	mm_params := FuncCallerMockCallFuncParams{f}

	// Record call args
	mmCallFunc.CallFuncMock.mutex.Lock()
	mmCallFunc.CallFuncMock.callArgs = append(mmCallFunc.CallFuncMock.callArgs, &mm_params)
	mmCallFunc.CallFuncMock.mutex.Unlock()

	for _, e := range mmCallFunc.CallFuncMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1
		}
	}

	if mmCallFunc.CallFuncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCallFunc.CallFuncMock.defaultExpectation.Counter, 1)
		mm_want := mmCallFunc.CallFuncMock.defaultExpectation.params
		mm_want_ptrs := mmCallFunc.CallFuncMock.defaultExpectation.paramPtrs

		mm_got := FuncCallerMockCallFuncParams{f}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.f != nil && !minimock.Equal(*mm_want_ptrs.f, mm_got.f) {
				mmCallFunc.t.Errorf("FuncCallerMock.CallFunc got unexpected parameter f, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCallFunc.CallFuncMock.defaultExpectation.expectationOrigins.originF, *mm_want_ptrs.f, mm_got.f, minimock.Diff(*mm_want_ptrs.f, mm_got.f))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCallFunc.t.Errorf("FuncCallerMock.CallFunc got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCallFunc.CallFuncMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCallFunc.CallFuncMock.defaultExpectation.results
		if mm_results == nil {
			mmCallFunc.t.Fatal("No results are set for the FuncCallerMock.CallFunc")
		}
		return (*mm_results).i1
	}
	if mmCallFunc.funcCallFunc != nil {
		return mmCallFunc.funcCallFunc(f)
	}
	mmCallFunc.t.Fatalf("Unexpected call to FuncCallerMock.CallFunc. %v", f)
	return
}

// CallFuncAfterCounter returns a count of finished FuncCallerMock.CallFunc invocations
func (mmCallFunc *FuncCallerMock) CallFuncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCallFunc.afterCallFuncCounter)
}

// CallFuncBeforeCounter returns a count of FuncCallerMock.CallFunc invocations
func (mmCallFunc *FuncCallerMock) CallFuncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCallFunc.beforeCallFuncCounter)
}

// Calls returns a list of arguments used in each call to FuncCallerMock.CallFunc.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCallFunc *mFuncCallerMockCallFunc) Calls() []*FuncCallerMockCallFuncParams {
	mmCallFunc.mutex.RLock()

	argCopy := make([]*FuncCallerMockCallFuncParams, len(mmCallFunc.callArgs))
	copy(argCopy, mmCallFunc.callArgs)

	mmCallFunc.mutex.RUnlock()

	return argCopy
}

// MinimockCallFuncDone returns true if the count of the CallFunc invocations corresponds
// the number of defined expectations
func (m *FuncCallerMock) MinimockCallFuncDone() bool {
	if m.CallFuncMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CallFuncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CallFuncMock.invocationsDone()
}

// MinimockCallFuncInspect logs each unmet expectation
func (m *FuncCallerMock) MinimockCallFuncInspect() {
	for _, e := range m.CallFuncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FuncCallerMock.CallFunc at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCallFuncCounter := mm_atomic.LoadUint64(&m.afterCallFuncCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CallFuncMock.defaultExpectation != nil && afterCallFuncCounter < 1 {
		if m.CallFuncMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FuncCallerMock.CallFunc at\n%s", m.CallFuncMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FuncCallerMock.CallFunc at\n%s with params: %#v", m.CallFuncMock.defaultExpectation.expectationOrigins.origin, *m.CallFuncMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCallFunc != nil && afterCallFuncCounter < 1 {
		m.t.Errorf("Expected call to FuncCallerMock.CallFunc at\n%s", m.funcCallFuncOrigin)
	}

	if !m.CallFuncMock.invocationsDone() && afterCallFuncCounter > 0 {
		m.t.Errorf("Expected %d calls to FuncCallerMock.CallFunc at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CallFuncMock.expectedInvocations), m.CallFuncMock.expectedInvocationsOrigin, afterCallFuncCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FuncCallerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCallFuncInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FuncCallerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FuncCallerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCallFuncDone()
}
